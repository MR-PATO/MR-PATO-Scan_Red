import os
import socket
import subprocess
import scapy.all as scapy
import netifaces
import ipaddress
import nmap  # Asegúrate de tener nmap instalado en tu sistema

# Título, versión y autor
VERSION = "1.0"
AUTOR = "MR.Pato"

# Código ANSI para color azul y naranja
AZUL = "\033[34m"
NARANJA = "\033[38;5;214m"
RESET = "\033[0m"

def obtener_ip_local():
    """Obtiene la IP local del dispositivo."""
    interfaces = netifaces.interfaces()
    for interface in interfaces:
        if netifaces.AF_INET in netifaces.ifaddresses(interface):
            ip_info = netifaces.ifaddresses(interface)[netifaces.AF_INET][0]
            ip = ip_info["addr"]
            if ip.startswith("192.168.") or ip.startswith("10.") or ip.startswith("172."):
                return ip
    return None

def obtener_nombre_dispositivo(ip):
    """Obtiene el nombre del dispositivo mediante una búsqueda inversa."""
    try:
        nombre = socket.gethostbyaddr(ip)[0]
    except socket.herror:
        nombre = "Desconocido"
    return nombre

def hacer_ping(ip):
    """Hace ping a la dirección IP y devuelve True si hay respuesta, False si no."""
    respuesta = subprocess.run(
        ["ping", "-c", "1", ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    if "1 packets transmitted, 1 received" in respuesta.stdout.decode():
        return True
    return False

def escanear_red_scapy():
    """Escanea los dispositivos activos en la misma red usando Scapy."""
    ip_local = obtener_ip_local()
    if not ip_local:
        print("No se pudo obtener la IP local. Asegúrate de estar conectado a una red.")
        return []
    
    # Obtener la subred de la IP local (solo la misma red)
    red = ipaddress.IPv4Network(f"{ip_local}/24", strict=False)
    dispositivos = []

    print(f"\n[+] Escaneando la red local: {red}...\n")
    request = scapy.ARP(pdst=f"{ip_local}/24")
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = broadcast / request
    dispositivos_encontrados = scapy.srp(packet, timeout=2, verbose=False)[0]

    for _, recibido in dispositivos_encontrados:
        ip_dispositivo = recibido.psrc
        nombre_dispositivo = obtener_nombre_dispositivo(ip_dispositivo)
        dispositivos.append({"ip": ip_dispositivo, "nombre": nombre_dispositivo})
    
    return dispositivos

def escanear_red_ping():
    """Escanea los dispositivos activos en la misma red usando Ping."""
    ip_local = obtener_ip_local()
    if not ip_local:
        print("No se pudo obtener la IP local. Asegúrate de estar conectado a una red.")
        return []
    
    # Obtener la subred de la IP local (solo la misma red)
    red = ipaddress.IPv4Network(f"{ip_local}/24", strict=False)
    dispositivos = []

    print(f"\n[+] Escaneando la red local: {red}...\n")

    for ip in red.hosts():  # Escanea solo la misma red local
        ip_str = str(ip)
        if hacer_ping(ip_str):
            nombre = obtener_nombre_dispositivo(ip_str)
            dispositivos.append({"ip": ip_str, "nombre": nombre})
    
    return dispositivos

def escanear_red_nmap():
    """Escanea la red local usando Nmap."""
    ip_local = obtener_ip_local()
    if not ip_local:
        print("No se pudo obtener la IP local. Asegúrate de estar conectado a una red.")
        return []

    # Obtener la subred de la IP local (solo la misma red)
    red = ipaddress.IPv4Network(f"{ip_local}/24", strict=False)
    dispositivos = []
    
    nm = nmap.PortScanner()

    print(f"\n[+] Escaneando la red local con Nmap: {red}...\n")

    for ip in red.hosts():  # Escanea solo la misma red local
        ip_str = str(ip)
        try:
            nm.scan(hosts=ip_str, arguments='-sn')  # -sn: Solo escaneo de host (ping)
            if nm.all_hosts():
                nombre = obtener_nombre_dispositivo(ip_str)
                dispositivos.append({"ip": ip_str, "nombre": nombre})
        except Exception as e:
            print(f"Error escaneando {ip_str}: {e}")
    
    return dispositivos

def escanear_puertos():
    """Escanea los puertos abiertos de los dispositivos detectados en la red local."""
    ip_local = obtener_ip_local()
    if not ip_local:
        print("No se pudo obtener la IP local. Asegúrate de estar conectado a una red.")
        return []

    dispositivos = escanear_red_scapy()  # Usamos escaneo con Scapy para obtener dispositivos en la red
    puertos_dispositivos = []

    if dispositivos:
        print("\n[+] Escaneando puertos abiertos...\n")
        for dispositivo in dispositivos:
            puertos_abiertos = []
            for puerto in range(1, 1025):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(0.5)
                resultado = sock.connect_ex((dispositivo["ip"], puerto))
                if resultado == 0:
                    puertos_abiertos.append(puerto)
                sock.close()

            if puertos_abiertos:
                puertos_dispositivos.append({
                    "ip": dispositivo["ip"],
                    "nombre": dispositivo["nombre"],
                    "puertos": puertos_abiertos
                })
            else:
                puertos_dispositivos.append({
                    "ip": dispositivo["ip"],
                    "nombre": dispositivo["nombre"],
                    "puertos": None
                })
    
    return puertos_dispositivos

def menu():
    os.system("clear")
    print(f"""{NARANJA}
███   ███  ██████            ██████     ██     ██████    █████             █████     ████     ██     ██   ██           ██████   ███████  █████
 ███ ███   ██  ██            ██  ██   ████    █ ███ █   ██   ██           ██   ██   ██  ██   ████    ███  ██            ██  ██   ██   █   ██ ██
 ███████   ██  ██            ██  ██  ██  ██     ██     ██   ██           █        ██       ██  ██   ████ ██            ██  ██   ██ █     ██  ██
 ███████   █████             █████   ██  ██     ██     ██   ██  ██████    █████   ██       ██  ██   ██ ████  ██████    █████    ████     ██  ██
 ██ █ ██   ██ ██             ██      ██████     ██     ██   ██                ██  ██       ██████   ██  ███            ██ ██    ██ █     ██  ██
 ██   ██   ██  ██    ██      ██      ██  ██     ██     ██   ██           ██   ██   ██  ██  ██  ██   ██   ██            ██  ██   ██   █   ██ ██
 ██   ██  ████ ██    ██     ████     ██  ██    ████     █████             █████     ████   ██  ██   ██   ██           ████ ██  ███████  █████

Versión: {VERSION}
Autor: {AUTOR}

{AZUL}[1] Escanear dispositivos conectados con (Scapy).{RESET}
{AZUL}[2] Escanear dispositivos conectados con (Nmap).{RESET}
{AZUL}[3] Escanear puertos abiertos.{RESET}
{AZUL}[4] Salir.{RESET}
{RESET}""")

def main():
    dispositivos = []

    while True:
        menu()
        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            dispositivos = escanear_red_scapy()
            if dispositivos:
                print("\n[+] Dispositivos detectados:")
                for dispositivo in dispositivos:
                    print(f"    {dispositivo['ip']} - {dispositivo['nombre']}")
            else:
                print("\n[-] No se encontraron dispositivos en la red.")
            input("\nPresione Enter para continuar...")

        elif opcion == "2":
            dispositivos = escanear_red_nmap()
            if dispositivos:
                print("\n[+] Dispositivos detectados:")
                for dispositivo in dispositivos:
                    print(f"    {dispositivo['ip']} - {dispositivo['nombre']}")
            else:
                print("\n[-] No se encontraron dispositivos en la red.")
            input("\nPresione Enter para continuar...")

        elif opcion == "3":
            puertos_dispositivos = escanear_puertos()
            if puertos_dispositivos:
                print("\n[+] Puertos abiertos encontrados:")
                for dispositivo in puertos_dispositivos:
                    if dispositivo["puertos"]:
                        print(f"Dispositivo: {dispositivo['ip']} - {dispositivo['nombre']}")
                        for puerto in dispositivo["puertos"]:
                            print(f"    Puerto {puerto} abierto")
                    else:
                        print(f"Dispositivo: {dispositivo['ip']} - {dispositivo['nombre']} - No hay puertos abiertos")
            else:
                print("\n[-] No se encontraron dispositivos con puertos abiertos.")
            input("\nPresione Enter para continuar...")

        elif opcion == "4":
            print("\nSaliendo del programa...")
            break
        else:
            print("\n[!] Opción no válida, intente de nuevo.")

if __name__ == "__main__":
    main()
